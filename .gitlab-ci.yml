---
stages:
  - Lint
  - Test
  - Build
  - Upload

include:
  - project: 'noc/common-jobs'
    ref: stable
    file: '/templates/upload.yml'
  - local: '/ansible/.ansible-ci.yml'

check labels:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA)
    - python ./scripts/check-labels.py --junit-report=build/reports/labels-junit.xml $FLIST
  only:
    - merge_requests
  tags:
    - docker
  artifacts:
    reports:
      junit: ./build/reports/labels-junit.xml
    expire_in: 7 days
  allow_failure: false
  retry: 2

flake8:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep ".py$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        mkdir -p build/reports;
        flake8 --format junit-xml $FLIST > build/reports/flake8-junit.xml || flake8 $FLIST;
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.py"
      - "**/*.py"
  tags:
    - docker
  artifacts:
    reports:
      junit: ./build/reports/flake8-junit.xml
    expire_in: 7 days
  allow_failure: false

black:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep ".py$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        black --check $FLIST;
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.py"
      - "**/*.py"
  tags:
    - docker
  allow_failure: false

# @todo: Rust fmt

mypy:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep ".py$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        mypy --follow-imports=skip --ignore-missing-imports $FLIST;
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.py"
      - "**/*.py"
  tags:
    - docker
  allow_failure: true

prettier:
  stage: Lint
  image: registry.getnoc.com/infrastructure/prettier:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep "\.(js|json|yml|css)$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        /usr/local/bin/prettier --config=.prettierrc --check $FLIST
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.js"
      - "*.json"
      - "*.css"
      - "*.yml"
      - "**/*.js"
      - "**/*.json"
      - "**/*.css"
      - "**/*.yml"
  tags:
    - docker
  allow_failure: true

pylint:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA | egrep ".py$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        pylint "$FLIST";
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.py"
      - "**/*.py"
  tags:
    - docker

py:test:
  stage: Test
  before_script:
    - DOCKER_COMPOSE_PROJECT=${CI_COMMIT_REF_SLUG}-${CI_JOB_ID}-pytests
    - mv .dockerignore .dockerignore.prod
    - cp .dockerignore.tests .dockerignore
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  script:
    # see docker/docker-compose.yml for complete list of migrations
    - >
      docker-compose
      -f .docker/docker-compose.yml
      -p "${DOCKER_COMPOSE_PROJECT}"
      build pytests
    - >
      docker-compose
      -f .docker/docker-compose.yml
      -p "${DOCKER_COMPOSE_PROJECT}"
      up
      --exit-code-from pytests
      pytests
  after_script:
    - DOCKER_COMPOSE_PROJECT=${CI_COMMIT_REF_SLUG}-${CI_JOB_ID}-pytests
    - JUNIT_XML_REPORT=build/reports/py-test-junit.xml
    - mkdir -p build/reports/
    - >
      docker cp
      "${DOCKER_COMPOSE_PROJECT}_pytests_1:/opt/noc/${JUNIT_XML_REPORT}"
      "${JUNIT_XML_REPORT}"
    - mv .dockerignore.prod .dockerignore
    - >
      docker-compose
      -f .docker/docker-compose.yml
      -p "${DOCKER_COMPOSE_PROJECT}"
      down -v
  only:
    refs:
      - merge_requests
      - master
      - /^release-\d+\.\d+/
  tags:
    - shell
  allow_failure: false
  artifacts:
    reports:
      junit: ./build/reports/py-test-junit.xml
    expire_in: 7 days

build:Docs:
  stage: Build
  environment: docs
  image: registry.getnoc.com/infrastructure/docs3:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --name-only $CI_COMMIT_SHA $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) | egrep "^docs/" || true)
    - >
      if [ ! -z "$FLIST" ];
      then
        cd docs/
        python3 ./scripts/build-auto-include.py
        sphinx-build -j auto -a -E -b html src/en ../build/docs/en
        python3 ./scripts/build-go.py ../build/docs/en/objects.inv
      else
        echo "No doc changes to build"
        true;
      fi
  tags:
    - docker
  artifacts:
    paths:
      - build/docs/en
    expire_in: 2 hours
  only:
    - merge_requests

build:Master Docs:
  stage: Build
  environment: docs
  image: registry.getnoc.com/infrastructure/docs3:master
  script:
    - set -x
    - cd docs/
    - python3 ./scripts/build-auto-include.py
    - sphinx-build -j auto -a -E -b html src/en ../build/docs/en
    - python3 ./scripts/build-go.py ../build/docs/en/objects.inv
  tags:
    - docker
  artifacts:
    paths:
      - build/docs/en
    expire_in: 2 hours
  only:
    refs:
      - master
      - /^release-\d+\.\d+/

build:Release Image:
  stage: Build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    # registry.getnoc.com/noc/noc/code:stable
    - docker build --target code -t $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG -f Dockerfile .
    # registry.getnoc.com/noc/noc/dev:stable
    - docker build --target dev -t $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG -f Dockerfile .
    # registry.getnoc.com/noc/noc/static:stable
    - docker build --target static -t $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG 
    - docker push $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG 
    - docker push $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG
    - docker rmi $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG
  tags:
    - shell
  only:
    - tags

build:web:
  stage: Build
  image: node:12
  script:
    - cd scripts/build/web
    - npm install
    - node src/index.js
  tags:
    - docker
  only:
    refs:
      - merge_requests
    changes:
      - "ui/web/**/*.js"
      - "ui/web/**/*.css"
      - "scripts/build/web/**/*"
  artifacts:
    paths:
      - dist/ui/pkg/web
      - dist/ui/pkg/web.debug

build:rust:
  stage: Build
  image: rust:1.41
  script:
    - set -x
    - cd rust/
    - export CARGO_TARGET_DIR=../build/rust
    - cargo build --release
  tags:
    - docker
  only:
    refs:
      - merge_requests
      - master
    changes:
      - "rust/**"
      - "rust/**/*"
  artifacts:
    paths:
      - build/rust/release/
    expire_in: 7 days

upload docs:
  stage: Upload
  environment: docs
  extends: .upload
  variables:
    SOURCE: build/docs/*
    DEST: cdn/$S3_BUCKET/$CI_COMMIT_REF_SLUG/
  only:
    refs:
      - master
      - /^release-\d+\.\d+/

gemnasium-python-dependency_scanning:
  stage: Test
  allow_failure: true
  variables:
    SECURE_ANALYZERS_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
    DS_MAJOR_VERSION: 2
  image:
    name: "$SECURE_ANALYZERS_PREFIX/gemnasium-python:$DS_MAJOR_VERSION"
  before_script:
    - apt install -y libpq-dev
  script:
    - /analyzer run
  tags:
    - docker
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH &&
          $GITLAB_FEATURES =~ /\bdependency_scanning\b/
      changes:
        - requirements.txt

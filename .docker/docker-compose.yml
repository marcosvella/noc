version: "2.4"

services:
  mongo:
    image: "mongo:4.0"
    command: --wiredTigerCacheSizeGB 1.5 --bind_ip_all --replSet noc --port 27017
    volumes:
      - ./files/mongo-init.js:/docker-entrypoint-initdb.d/01mongo-init.js
      - type: tmpfs
        target: /data/db
        tmpfs:
          size: "512M"
    environment:
      MONGO_INITDB_DATABASE: noc
      MONGO_INITDB_ROOT_USERNAME: noc
      MONGO_INITDB_ROOT_PASSWORD: noc

  mongodb-repl-set-init:
    image: "mongo:4.0"
    depends_on:
      mongo:
        condition: service_started
    volumes:
      - ./files/rs-init.sh:/rs-init.sh
    environment:
      MONGO_INITDB_ROOT_USERNAME: noc
      MONGO_INITDB_ROOT_PASSWORD: noc
      MONGO_REPL_SET_NAME: noc
      MONGO_REPL_SET_HOSTS: mongo
    entrypoint: sh /rs-init.sh
    healthcheck:
      test: ["CMD","grep", "healthy", "/tmp/job_is_done"]
      interval: 3s
      timeout: 3s
      retries: 100

  postgres:
    image: "postgres:9.6"
    environment:
      POSTGRES_USER: noc
      POSTGRES_DB: noc
      POSTGRES_PASSWORD: noc
    volumes:
      - type: tmpfs
        target: /data
        tmpfs:
          size: "512M"
    command: -c fsync=off
    healthcheck:
      test: ["CMD", "su", "-", "postgres", "-c", "psql -U noc -l | grep noc"]
      interval: 3s
      timeout: 3s
      retries: 100

  py2migrate:
    build:
      context: ../
      dockerfile: .docker/Dockerfile.build
    working_dir: /opt/noc
    depends_on:
      postgres:
        condition: service_healthy
      mongodb-repl-set-init:
        condition: service_healthy
      clickhouse:
        condition: service_started
    command: >
      sh -c "set -xe
      && ./noc migrate
      && ./noc ensure-indexes
      && ./noc migrate-ch
      && /usr/bin/python ./scripts/deploy/install-packages requirements/collections.json
      && ./noc collection sync
      && ./noc sync-perm
      && ./noc sync-mibs
      "
    env_file:
      - noc.conf

  py2tests:
    build:
      context: ../
      dockerfile: .docker/Dockerfile.build
    restart: "no"
    working_dir: /opt/noc
    depends_on:
      postgres:
        condition: service_healthy
      mongodb-repl-set-init:
        condition: service_healthy
      clickhouse:
        condition: service_started
      nsqd:
        condition: service_started
      telnetd:
        condition: service_started
      sshd:
        condition: service_started
      dropbear:
        condition: service_started
      snmpd:
        condition: service_started
    command: >
      sh -c "set -xe
      && /usr/bin/python ./scripts/deploy/install-packages requirements/collections.json
      && ./noc test run --junit-report=build/reports/py2-test-junit.xml --statistics
      "
    environment:
      NOC_TEST_DB: noc_tests
    env_file:
      - noc.conf

  py3migrate:
    build:
      context: ../
      dockerfile: .docker/Dockerfile.build3
    working_dir: /opt/noc
    depends_on:
      postgres:
        condition: service_healthy
      mongodb-repl-set-init:
        condition: service_healthy
      clickhouse:
        condition: service_started
      nsqd:
        condition: service_started
      telnetd:
        condition: service_started
      sshd:
        condition: service_started
      dropbear:
        condition: service_started
      snmpd:
        condition: service_started
    command: >
      sh -c "set -xe
      && ./noc migrate
      && ./noc ensure-indexes
      && ./noc migrate-ch
      && /usr/bin/python3 ./scripts/deploy/install-packages requirements/collections.json
      && ./noc collection sync
      && ./noc sync-perm
      && ./noc sync-mibs
      "
    env_file:
      - noc.conf

  py3tests:
    build:
      context: ../
      dockerfile: .docker/Dockerfile.build3
    restart: "no"
    working_dir: /opt/noc
    depends_on:
      postgres:
        condition: service_healthy
      mongodb-repl-set-init:
        condition: service_healthy
      clickhouse:
        condition: service_started
      nsqd:
        condition: service_started
      telnetd:
        condition: service_started
      sshd:
        condition: service_started
      dropbear:
        condition: service_started
      snmpd:
        condition: service_started
    command: >
      sh -c "set -xe
      && /usr/bin/python3 ./scripts/deploy/install-packages requirements/collections.json
      && ./noc test run --junit-report=build/reports/py3-test-junit.xml --statistics
      "
    environment:
      NOC_TEST_DB: noc_tests
    env_file:
      - noc.conf

  nsqlookupd:
    image: nsqio/nsq:v1.1.0
    command: /nsqlookupd
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://0.0.0.0:4161/ping || exit 1"
      interval: 3s
      timeout: 3s
      retries: 100

  nsqd:
    image: nsqio/nsq:v1.1.0
    depends_on:
      nsqlookupd:
        condition: service_healthy
    command: /nsqd --lookupd-tcp-address=nsqlookupd:4160 --mem-queue-size=10000
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://0.0.0.0:4151/ping || exit 1"
      interval: 3s
      timeout: 3s
      retries: 100

  clickhouse:
    image: yandex/clickhouse-server:latest

  memcached:
    image: memcached:alpine

  redis:
    image: redis:5-alpine

  sshd:
    image: "registry.getnoc.com/infrastructure/tests/testsshd:master"
    command: /usr/sbin/sshd -D -e -4

  dropbear:
    image: "registry.getnoc.com/infrastructure/tests/testdropbear:master"
    command: /usr/sbin/dropbear -F -E

  telnetd:
    image: "registry.getnoc.com/infrastructure/tests/testtelnetd:master"
    command: /usr/sbin/telnetd -F

  snmpd:
    image: "registry.getnoc.com/infrastructure/tests/testsnmpd:master"
    command: "/usr/sbin/snmpd -f -Lo: -d -a udp:161"
